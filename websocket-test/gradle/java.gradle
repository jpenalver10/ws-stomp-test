/*
    Configuración Java para los proyectos.

    Para definir la URL de Nexus, añadir estas entradas en ~/.gradle/gradle.properties:
        nexusService=http://nexuspro01.cpd.wtransnet.net:8081.
        
*/

apply plugin: 'jacoco'

ext.wtnCoreVersion = '1.3.+'
ext.wtnUtilTestVersion = '1.2.+'

ext.wtnNotificatorLibVersion = '1.5.+'
ext.wtnTrackingNotificationLibVersion = '1.11.+'
ext.wtnCreditNotificationVersion = '1.2.+'
ext.wtnDocDriveNotificationVersion = '0.5.+'
ext.wtnIoUtilsVersion = '0.1.+'
ext.wtnSpringAppVersion = '0.1.+'
ext.wtnSpringAmqpConfigVersion = '0.1.+'
ext.wtnJunitUtilsVersion = '0.1.+'
ext.wtnLoggerVersion = '0.3.+'

ext.springVersion = '4.3.+'
ext.slf4jVersion = '1.7.+'
ext.junitVersion = '4.12'
ext.rabbitMqVersion = '1.4.+'
ext.guavaVersion = '18.0'
ext.mockitoVersion = '1.10.+'
ext.hamcrestVersion = '1.3'

ext.wtnCoreCommonsLib = "wtn.core:wtn-core-commons:${wtnCoreVersion}"
ext.wtnUtilTestUnitLib = "wtn.util.test:wtn-util-test-unit:${wtnUtilTestVersion}"
ext.wtnSpringAppIoUtilsBeansLib = "wtn.spring:wtn-spring-application-io-utils-beans:${wtnSpringAppVersion}"
ext.wtnSpringAppIoUtils = "wtn.spring:wtn-spring-application-io-utils:${wtnSpringAppVersion}"
ext.wtnSpringAmqpConfigLib = "wtn.spring.amqp:wtn-spring-amqp-config:${wtnSpringAmqpConfigVersion}"
ext.wtnNotificatorLibApiLib = "wtn.notificator:wtn-notificator-lib-api:${wtnNotificatorLibVersion}"
ext.wtnNotificatorLibApiBeansLib = "wtn.notificator:wtn-notificator-lib-api-beans:${wtnNotificatorLibVersion}"
ext.wtnNotificatorLibApiUtilTestLib = "wtn.notificator:wtn-notificator-lib-util-test:${wtnNotificatorLibVersion}"
ext.wtnIoUtilsServicesLib = "wtn.io:wtn-io-utils-services:${wtnIoUtilsVersion}"
ext.wtnTrackingNotificationLib = "wtn.tracking:wtn-tracking-notification:${wtnTrackingNotificationLibVersion}"
ext.wtnCreditNotificationLib = "wtn.credit:wtn-credit-notification:${wtnCreditNotificationVersion}"
ext.wtnDocDriveNotificationLib = "wtn.doc-drive:wtn-doc-drive-notification:${wtnDocDriveNotificationVersion}"
ext.wtnJunitUtilsLib = "wtn.junit:wtn-junit-utils:${wtnJunitUtilsVersion}"
ext.wtnLoggerLib = "wtn.logger:wtn-logger-core:${wtnLoggerVersion}"

ext.springLib = [
    "org.springframework:spring-context:${springVersion}",
    "org.springframework:spring-context-support:${springVersion}",
    'javax.inject:javax.inject:1',
    "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
]

ext.logLib = [
    "org.slf4j:slf4j-api:${slf4jVersion}",
    'ch.qos.logback:logback-classic:1.1.+',
    'org.codehaus.janino:janino:2.6.+'
]

ext.javaMailLib = [
    "javax.mail:mail:1.4.7",
    "jaf:activation:1.0.2"
]

ext.velocityLib = [
    "org.apache.velocity:velocity:1.7",
    dependencies.create("org.apache.velocity:velocity-tools:2.0") {
        exclude group: 'xml-apis', module: 'xml-apis'
    }
]

ext.rabbitMqLib = "org.springframework.amqp:spring-rabbit:${rabbitMqVersion}"

ext.springTestLib = "org.springframework:spring-test:${springVersion}"

ext.hamcrestLib = "org.hamcrest:hamcrest-all:${hamcrestVersion}"

ext.junitLib = [
    dependencies.create("junit:junit:${junitVersion}") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
]

ext.mockitoLib = [
    dependencies.create("org.mockito:mockito-core:${mockitoVersion}") {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
]

repositories {
    maven {
        name 'Nexus'
		def repositoryGroupName = isSnapshot ? 'public-development' : 'public'
        url "${nexusService}/repository/${repositoryGroupName}/"
    }
    mavenLocal()
}

configurations {
    compile.exclude group: 'commons-logging'
}

dependencies {
    // librerías comunes a todos los sistemas
    compile "com.google.guava:guava:${guavaVersion}"
    testCompile("com.google.guava:guava-testlib:${guavaVersion}") {
       exclude group: 'junit', module: 'junit'
    }
}

compileJava {
  if (project.hasProperty("xlint")) {
    options.compilerArgs << '-Xlint'
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
