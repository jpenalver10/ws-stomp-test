<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504180848000</longProp>
        <longProp name="ThreadGroup.end_time">1504180848000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers"/>
        </HeaderManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">false</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Variables - CHANGEME" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="wsDomain" elementType="Argument">
              <stringProp name="Argument.name">wsDomain</stringProp>
              <stringProp name="Argument.value">ws-test.company.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wsURI" elementType="Argument">
              <stringProp name="Argument.name">wsURI</stringProp>
              <stringProp name="Argument.value">/stomp</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wsTopic" elementType="Argument">
              <stringProp name="Argument.name">wsTopic</stringProp>
              <stringProp name="Argument.value">/topic/news.local.1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="wsToken" elementType="Argument">
              <stringProp name="Argument.name">wsToken</stringProp>
              <stringProp name="Argument.value">xxxxxxxxxxxTOKENxxxxxxxxxx</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ReadLoopCount" elementType="Argument">
              <stringProp name="Argument.name">ReadLoopCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webDomain" elementType="Argument">
              <stringProp name="Argument.name">webDomain</stringProp>
              <stringProp name="Argument.value">test.company.com</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webURI" elementType="Argument">
              <stringProp name="Argument.name">webURI</stringProp>
              <stringProp name="Argument.value">/</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Connect" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set STOMP Connect (BeanShell)" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
System.out.println(&quot;Connect PreProcessor&quot;);

String s = &quot;CONNECT\n&quot; +       
	   &quot;login:${wsToken}\n&quot; +
                   &quot;passcode:\n&quot; +
                   &quot;accept-version:1.1,1.0\n&quot; +
                   &quot;heart-beat:0,0\n&quot; +      // note: Heartbest 0 as JMeter script can&apos;t commit to send or receive within specific time periods
                   &quot;\n&quot; + 
                   &apos;\0&apos;  // note: NULL char at end
                   ;
 
vars.put(&quot;wsStompData&quot;, s);         
        
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Single Write Sampler - CONNECT" enabled="true">
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">${wsDomain}</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">${wsURI}</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">${wsStompData}
</stringProp>
            <boolProp name="createNewConnection">true</boolProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Read" enabled="true"/>
        <hashTree>
          <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler - Consume STOMP Connection Response" enabled="true">
            <boolProp name="TLS">false</boolProp>
            <stringProp name="server"></stringProp>
            <stringProp name="port">80</stringProp>
            <stringProp name="path"></stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <boolProp name="createNewConnection">false</boolProp>
            <boolProp name="optional">false</boolProp>
            <stringProp name="readTimeout">60000</stringProp>
          </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-2087582999">CONNECTED</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Subscribe" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set STOMP Subscribe (BeanShell)" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">
String s = &quot;SUBSCRIBE\n&quot; +
                    &quot;priority:4\n&quot; +
                    &quot;id:sub-0\n&quot; +
                    &quot;destination:${wsTopic}\n&quot; +
                    &quot;\n&quot; +
                    &apos;\0&apos;  // note: NULL char at end
                    ;

vars.put(&quot;wsStompData&quot;, s);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler" testname="WebSocket Subscribe" enabled="true">
            <boolProp name="TLS">true</boolProp>
            <stringProp name="server">myws-test.iceflo.net</stringProp>
            <stringProp name="port">443</stringProp>
            <stringProp name="path">/stomp</stringProp>
            <boolProp name="binaryPayload">false</boolProp>
            <stringProp name="requestData">${wsStompData}
</stringProp>
            <boolProp name="createNewConnection">false</boolProp>
          </eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${ReadLoopCount}</stringProp>
        </LoopController>
        <hashTree>
          <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Read" enabled="true"/>
          <hashTree>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Clear WS Variables (Beanshell)" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
vars.put(&quot;wsType&quot;, &quot;&quot;);
vars.put(&quot;wsMessage&quot;, &quot;&quot;);

System.out.println(&quot;Reading from WS topic&quot;);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler guiclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui" testclass="eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler" testname="WebSocket Single Read Sampler - STOMP Subsription Response" enabled="true">
              <boolProp name="TLS">false</boolProp>
              <stringProp name="server"></stringProp>
              <stringProp name="port">80</stringProp>
              <stringProp name="path"></stringProp>
              <boolProp name="binaryPayload">false</boolProp>
              <boolProp name="createNewConnection">false</boolProp>
              <boolProp name="optional">true</boolProp>
              <stringProp name="readTimeout">10000</stringProp>
            </eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Handle WS Message and Extract Type and Body (Beanshell)" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">
String  dataString = prev.getResponseDataAsString();

System.out.println(&quot;Message[&quot;+dataString+&quot;]&quot;);

String[] parts = dataString.split(&quot;\n&quot;);

if (parts.length &gt;= 11) {
      String rType = parts[0];
      String rBody = parts[10];
      System.out.println(&quot;Body [&quot;+rBody+&quot;]&quot;);

      vars.put(&quot;wsType&quot;, rType);
      vars.put(&quot;wsMessage&quot;, rBody);

      System.out.println(&quot;Got Message type[&quot;+rType+&quot;] body[&quot;+rBody+&quot;]&quot;);

}
	              </stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Message Received?" enabled="true">
            <stringProp name="IfController.condition">&quot;${wsType}&quot; == &quot;MESSAGE&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="HTTP Request" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${webDomain}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${webURI}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
