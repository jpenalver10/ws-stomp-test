apply plugin: 'java'
apply plugin: 'idea'

repositories {
    mavenCentral()
}

dependencies {
    testCompile 'junit:junit:4.12'

    // https://mvnrepository.com/artifact/org.apache.jmeter/ApacheJMeter_core
    compile('org.apache.jmeter:ApacheJMeter_core:3.1') {
        transitive = false    // Just avoid downloading half the internet
    }

    compile('org.apache.jmeter:ApacheJMeter_components:3.1') {
        transitive = false    // Just avoid downloading half the internet
    }

    compile('org.apache.jmeter:ApacheJMeter_http:3.1') {
        transitive = false    // Just avoid downloading half the internet
    }

    // https://mvnrepository.com/artifact/org.apache.jmeter/jorphan
    compile('org.apache.jmeter:jorphan:3.1') {
        transitive = false
    }

    // https://mvnrepository.com/artifact/logkit/logkit
    compile('logkit:logkit:2.0') {
        transitive = false
    }

    compile('org.mockito:mockito-core:2.2.15')

    testCompile('avalon-framework:avalon-framework:4.1.4')

    // https://mvnrepository.com/artifact/commons-io/commons-io
    testCompile('commons-io:commons-io:2.5')
}

sourceSets {
    main {
        resources {
            srcDir "${buildDir}/generated"
        }
    }
}

version = 'dev'

task determineVersion {
    doLast {
        def proc = "git describe --exact-match HEAD".execute()
        proc.waitFor()
        if (proc.exitValue()) {
            logger.quiet("Building development version.")
        } else {
            def versionTag = proc.in.readLines()[0]
            // Check that tag matches format like v0.1.2.beta or 1.0 (OSGi version syntax)
            if (versionTag ==~ /v?[0-9]+(\.\d+){1,2}(\.[\w\d_-]+)?/) {
                if (versionTag.startsWith("v")) {
                    versionTag = versionTag[1..-1]
                }
                logger.quiet("Building version ${versionTag}.")
                project.version = versionTag

                ext.versionDir = new File("${buildDir}", "generated/eu/luminis/jmeter/wssampler")
                versionDir.mkdirs()

                new File(versionDir, "version.properties").text = versionTag
            } else {
                logger.error("Version tag '${versionTag}' does not contain a valid version.");
            }
        }
    }
}

compileJava.dependsOn determineVersion

test {
  testLogging {
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        println "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
      }
    }
  }
}